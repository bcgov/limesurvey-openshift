---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Chart.Name | quote }}
  namespace: {{ .Values.global.licensePlate }}{{ .Values.global.sectionTag }}
  labels:
{{ include "php.labels.standard" . | indent 4 }}
    app.openshift.io/runtime: {{ .Values.labels.runtime }}
    app.openshift.io/runtime-version: {{ .Values.labels.version | quote }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name | quote }}
  template:
    metadata:
      labels: 
        app: {{ .Chart.Name | quote }}
      annotations:
        image.openshift.io/triggers: |-
          [
            {
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "{{ .Values.global.licensePlate }}-tools",
                "name": "{{ .Chart.Name }}:{{ .Values.global.image.imageStreamTag }}"
              },
              "fieldPath": "spec.template.spec.containers[0].image"
            }
          ]
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-init-first: 'true'
        vault.hashicorp.com/agent-pre-populate-only: 'true'
        vault.hashicorp.com/namespace: {{ .Values.global.vault.namespace }}
        vault.hashicorp.com/role: {{ .Values.global.vault.engine }}
        vault.hashicorp.com/auth-path: {{ .Values.global.vault.authPath }}
        vault.hashicorp.com/agent-inject-secret-postgres: {{ .Values.global.vault.engine }}{{ .Values.global.vault.path }}/postgres
        vault.hashicorp.com/agent-inject-template-postgres: |
          {{ `{{- with secret ` }}"{{ .Values.global.vault.engine }}{{ .Values.global.vault.path }}/postgres"{{ ` }}
          {{- range $k, $v := .Data.data }}
          export {{ $k }}='{{ $v }}'
          {{- end }}
          {{- end }}` }}
        vault.hashicorp.com/agent-inject-secret-limesurvey: {{ .Values.global.vault.path }}/limesurvey
        vault.hashicorp.com/agent-inject-template-limesurvey: |
          {{ `{{- with secret ` }}"{{ .Values.global.vault.engine }}{{ .Values.global.vault.path }}/limesurvey"{{ ` }}
          {{- range $k, $v := .Data.data }}
          export {{ $k }}='{{ $v }}'
          {{- end }}
          {{- end }}` }}
    spec:
      volumes:
        - name: {{ .Values.global.volumeMounts.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.global.volumeMounts.name }}
        - name: tmp
          emptyDir: {}
      {{- if .Values.global.vault.serviceAccount }}
      serviceAccountName: {{ .Values.global.vault.serviceAccount }}
      {{- end }}
      initContainers:
        - name: limesurvey-init
          image: "{{ .Values.global.image.repository }}{{ .Values.global.licensePlate }}-tools/{{ .Chart.Name }}:{{ .Values.global.image.imageStreamTag }}"
          command: ["/bin/bash", "limesurvey-init.sh"]
          volumeMounts:
            - mountPath: {{ .Values.global.volumeMounts.mountPath | quote }}
              name: {{ .Values.global.volumeMounts.name }}
              {{- if .Values.global.volumeMounts.subPath }}
              subPath: {{ .Values.global.volumeMounts.subPath | quote }}
              {{- end }}
            - mountPath: /tmp
              name: tmp
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          imagePullPolicy: Always
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          securityContext: {}
      containers:
        - name: {{ .Chart.Name | quote }}
          image: "{{ .Values.global.image.repository }}{{ .Values.global.licensePlate }}-tools/{{ .Chart.Name }}:{{ .Values.global.image.imageStreamTag }}"
          ports:
            - name: {{ .Values.ports.name }}
              containerPort: {{ .Values.ports.containerPort }}
              protocol: {{ .Values.ports.protocol }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          volumeMounts:
            - mountPath: {{ .Values.global.volumeMounts.mountPath | quote }}
              name: {{ .Values.global.volumeMounts.name }}
              subPath: {{ .Values.global.volumeMounts.subPath | quote }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
          readinessProbe:
            tcpSocket:
              port: {{ .Values.ports.containerPort }}
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe: 
            tcpSocket:
              port: {{ .Values.ports.containerPort }}
            initialDelaySeconds: 120
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: Recreate
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 600
...
