---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Chart.Name | quote }}
  namespace: {{ .Values.global.licensePlate }}{{ .Values.global.sectionTag }}
  labels:
{{ include "postgres.labels.standard" . | indent 4 }}
    app.openshift.io/runtime: {{ .Values.labels.runtime }}
    app.openshift.io/runtime-version: {{ .Values.labels.version | quote }}
  annotations:
    image.openshift.io/triggers: |-
      [
        {
          "from": {
            "kind": "ImageStreamTag",
            "namespace": "{{ .Values.global.licensePlate }}-tools",
            "name": "{{ .Chart.Name }}:{{ .Values.global.image.imageStreamTag }}"
          },
          "fieldPath": "spec.template.spec.containers[0].image"
        }
      ]
spec:
  serviceName: {{ .Chart.Name | quote }}
  replicas: {{ .Values.global.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name | quote }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name | quote }}
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/namespace: {{ .Values.global.vault.namespace }}
        vault.hashicorp.com/auth-path: {{ .Values.global.vault.authPath }}
        vault.hashicorp.com/role: {{ .Values.global.vault.engine }}
        vault.hashicorp.com/agent-inject-secret-postgres: {{ .Values.global.vault.path }}/postgres
        vault.hashicorp.com/agent-inject-template-postgres: |
          {{ `{{- with secret ` }}"{{ .Values.global.vault.engine }}{{ .Values.global.vault.path }}/postgres"{{ ` }}
          {{- range $k, $v := .Data.data }}
          export {{ $k }}='{{ $v }}'
          {{- end }}
          {{- end }}` }}
    spec:
      terminationGracePeriodSeconds: 10
      {{- if .Values.global.vault.serviceAccount }}
      serviceAccountName: {{ .Values.global.vault.serviceAccount }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name | quote }}
          image: "{{ .Values.global.image.repository }}{{ .Values.global.licensePlate }}-tools/{{ .Chart.Name }}:{{ .Values.global.image.imageStreamTag }}"
          command: ["/bin/bash"]
          args: ["-c", "source /vault/secrets/postgres && exec docker-entrypoint.sh postgres"]
          ports:
            - containerPort: {{ .Values.ports.containerPort }}
              name: {{ .Chart.Name | trunc 15 | trimSuffix "-" | quote }}
          volumeMounts:
            - mountPath: {{ .Values.volumeMounts.mountPath }}
              name: db-storage
            - mountPath: /docker-entrypoint-initdb.d
              name: preinit-scripts
              readOnly: true
          imagePullPolicy: Always
      volumes:
        - name: preinit-scripts
          configMap:
            name: {{ .Chart.Name}}-init
            items:
              - key: init.sh
                path: init.sh
  volumeClaimTemplates:
    - metadata:
        name: db-storage # -<chart name>-<n> is appended by the statefulset controller
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: netapp-file-standard
        resources:
          requests:
            storage: {{ .Values.global.pvc.postgres.size | quote }}
...
